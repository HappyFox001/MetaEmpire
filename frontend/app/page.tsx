"use client";

import React, { useEffect, useState, useCallback } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Badge } from "@/components/ui/badge";
import { motion, AnimatePresence } from "framer-motion";
import Link from "next/link";

const getTopicStyles = (title: string): { textColor: string; bgColor: string; borderColor: string; glowColor: string; icon: string } => {
  if (title.includes("ÁªèÊµé")) return { textColor: "text-emerald-400", bgColor: "bg-emerald-950/30", borderColor: "border-emerald-800", glowColor: "emerald", icon: "üìà" };
  if (title.includes("AI")) return { textColor: "text-blue-400", bgColor: "bg-blue-950/30", borderColor: "border-blue-800", glowColor: "blue", icon: "ü§ñ" };
  if (title.includes("Web3")) return { textColor: "text-purple-400", bgColor: "bg-purple-950/30", borderColor: "border-purple-800", glowColor: "purple", icon: "üîó" };
  if (title.includes("Êï∞Â≠óË¥ßÂ∏Å")) return { textColor: "text-amber-400", bgColor: "bg-amber-950/30", borderColor: "border-amber-800", glowColor: "amber", icon: "üí∞" };
  if (title.includes("ÂÖÉÂÆáÂÆô")) return { textColor: "text-pink-400", bgColor: "bg-pink-950/30", borderColor: "border-pink-800", glowColor: "pink", icon: "üåå" };
  if (title.includes("ÁâàÊùÉ")) return { textColor: "text-red-400", bgColor: "bg-red-950/30", borderColor: "border-red-800", glowColor: "red", icon: "¬©Ô∏è" };
  return { textColor: "text-gray-200", bgColor: "bg-gray-900/60", borderColor: "border-gray-800", glowColor: "gray", icon: "üí¨" }; // ÈªòËÆ§È¢úËâ≤
};

const getHeatIndicator = (heat: number): string => {
  if (heat >= 1000) return "üî•üî•üî•";
  if (heat >= 700) return "üî•üî•";
  return "üî•";
};

const getSupportRatio = (support: number, oppose: number) => {
  const total = support + oppose;
  return total === 0 ? 50 : (support / total) * 100;
};

const useAnimatedVotes = (support: number, oppose: number) => {
  const [animatedSupport, setAnimatedSupport] = useState(support);
  const [animatedOppose, setAnimatedOppose] = useState(oppose);

  useEffect(() => {
    const interval = setInterval(() => {
      // Generate small random fluctuations (up to ¬±5% of the original value)
      const supportFluctuation = Math.floor(Math.random() * (support * 0.1)) - (support * 0.05);
      const opposeFluctuation = Math.floor(Math.random() * (oppose * 0.1)) - (oppose * 0.05);
      
      setAnimatedSupport(Math.max(0, support + supportFluctuation));
      setAnimatedOppose(Math.max(0, oppose + opposeFluctuation));
    }, 2000); // Update every 2 seconds

    return () => clearInterval(interval);
  }, [support, oppose]);

  return { animatedSupport, animatedOppose };
};

interface Topic {
  id: string;
  title: string;
  description: string;
  status: string;
  heat: number;
  support: number;
  oppose: number;
  animatedSupport?: number;
  animatedOppose?: number;
}

const mockTopics: Topic[] = [
  {
    id: "1",
    title: "ÁâπÊúóÊôÆ‚ÄúËß£ÊîæÊó•‚ÄùÂÖ≥Á®éÂºïÂèëÂÖ®ÁêÉË¥∏ÊòìÈúáËç°",
    description: "2025Âπ¥4Êúà2Êó•ÔºåÁæéÂõΩÊÄªÁªüÁâπÊúóÊôÆÂÆ£Â∏ÉÂÆûÊñΩ‚ÄúËß£ÊîæÊó•‚ÄùÂÖ≥Á®éÊîøÁ≠ñÔºåÂØπÂ§ßÂ§öÊï∞ÂõΩÂÆ∂ÁöÑËøõÂè£ÂïÜÂìÅÂæÅÊî∂10%ÁöÑÂü∫Á°ÄÂÖ≥Á®éÔºåÂπ∂ÂØπÁâπÂÆöÂïÜÂìÅÂ¶ÇÊ±ΩËΩ¶Âíå‰∏≠ÂõΩËøõÂè£ÂïÜÂìÅÂæÅÊî∂Êõ¥È´òÁöÑÂÖ≥Á®é„ÄÇËøô‰∏ÄÊîøÁ≠ñÂØºËá¥ÂÖ®ÁêÉ‰∏ªË¶Å‰ºÅ‰∏öÔºåÂ¶ÇÊ≤ÉÂ∞îÁéõ„ÄÅShein„ÄÅÁ¶èÁâπÂíåTargetÔºåÁ∫∑Á∫∑Ë°®Á§∫Â∞ÜÊèêÈ´ò‰∫ßÂìÅ‰ª∑Ê†ºÔºå‰ª•Â∫îÂØπÊàêÊú¨‰∏äÂçá„ÄÇ",
    status: "ËøõË°å‰∏≠",
    heat: 1580,
    support: 700,
    oppose: 500,
  },
  {
    id: "2",
    title: "‰∏≠ÁæéËææÊàê90Â§©ÂÖ≥Á®éÁºìÂíåÂçèËÆÆÔºåÂ∏ÇÂú∫ÂèçÂ∫îÁßØÊûÅ",
    description: "Âú®Êó•ÂÜÖÁì¶‰∏æË°åÁöÑ‰∏≠ÁæéÁªèË¥∏‰ºöË∞à‰∏≠ÔºåÂèåÊñπÂêåÊÑèÂú®Êú™Êù•90Â§©ÂÜÖÊöÇÂÅúÈÉ®ÂàÜÈ´òÈ¢ùÂÖ≥Á®éÁöÑÂÆûÊñΩ„ÄÇÁæéÂõΩÂ∞ÜÂØπ‰∏≠ÂõΩÂïÜÂìÅÁöÑÈÉ®ÂàÜÂÖ≥Á®é‰ªé34%‰∏ãË∞ÉËá≥10%ÔºåËÄå‰∏≠ÂõΩ‰πüÁõ∏Â∫îÂú∞Èôç‰ΩéÂØπÁæéÂõΩ‰∫ßÂìÅÁöÑÂÖ≥Á®é„ÄÇËøô‰∏Ä‰∏æÊé™Ë¢´ËßÜ‰∏∫ÁºìËß£Ë¥∏ÊòìÁ¥ßÂº†Â±ÄÂäøÁöÑÈáçË¶Å‰∏ÄÊ≠•ÔºåÂ∏ÇÂú∫ÂØπÊ≠§ÂèçÂ∫îÁßØÊûÅ„ÄÇ",
    status: "Â∑≤ËææÊàêÂçèËÆÆ",
    heat: 1320,
    support: 850,
    oppose: 300,
  },
  {
    id: "3",
    title: "ÂÖ®ÁêÉ‰ºÅ‰∏öÂ∫îÂØπÁæéÂõΩÊñ∞ÂÖ≥Á®éÔºåË∞ÉÊï¥‰æõÂ∫îÈìæÁ≠ñÁï•",
    description: "Èù¢ÂØπÁæéÂõΩÊñ∞ÂÆûÊñΩÁöÑÂÖ≥Á®éÊîøÁ≠ñÔºåÂÖ®ÁêÉ‰ºÅ‰∏öÂºÄÂßãÈáçÊñ∞ËØÑ‰º∞ÂíåË∞ÉÊï¥ÂÖ∂‰æõÂ∫îÈìæÁ≠ñÁï•„ÄÇËÆ∏Â§öÂÖ¨Âè∏ËÄÉËôëÂ∞ÜÁîü‰∫ßÂü∫Âú∞ËΩ¨ÁßªÂà∞ÂÖ≥Á®éÂΩ±ÂìçËæÉÂ∞èÁöÑÂõΩÂÆ∂Ôºå‰ª•Èôç‰ΩéÊàêÊú¨Âπ∂‰øùÊåÅÁ´û‰∫âÂäõ„ÄÇËøô‰∏ÄË∂ãÂäøÂèØËÉΩÂØπÂÖ®ÁêÉË¥∏ÊòìÊ†ºÂ±Ä‰∫ßÁîüÊ∑±ËøúÂΩ±Âìç„ÄÇ",
    status: "Ë∞ÉÊï¥‰∏≠",
    heat: 980,
    support: 600,
    oppose: 250,
  },
  {
    id: "4",
    title: "ÁæéÂõΩÊ∂àË¥πËÄÖÈù¢‰∏¥‰ª∑Ê†º‰∏äÊ∂®ÂéãÂäõÔºåÈÄöËÉÄÈ£éÈô©Âä†Ââß",
    description: "Áî±‰∫éÊñ∞ÂÖ≥Á®éÊîøÁ≠ñÁöÑÂÆûÊñΩÔºåÁæéÂõΩÊ∂àË¥πËÄÖÂºÄÂßãÊÑüÂèóÂà∞‰ª∑Ê†º‰∏äÊ∂®ÁöÑÂéãÂäõ„ÄÇ‰ªéÊó•Â∏∏Áî®ÂìÅÂà∞ÁîµÂ≠ê‰∫ßÂìÅÔºåÂ§ö‰∏™È¢ÜÂüüÁöÑÂïÜÂìÅ‰ª∑Ê†ºÂá∫Áé∞‰∏äÊ∂®Ë∂ãÂäøÔºåÂ¢ûÂä†‰∫ÜÂÆ∂Â∫≠ÁöÑÁîüÊ¥ªÊàêÊú¨„ÄÇÁªèÊµéÂ≠¶ÂÆ∂Ë≠¶ÂëäÔºåËøôÂèØËÉΩÂä†ÂâßÈÄöËÉÄÈ£éÈô©ÔºåÂΩ±ÂìçÁªèÊµéÁ®≥ÂÆö„ÄÇ",
    status: "ÂÖ≥Ê≥®‰∏≠",
    heat: 890,
    support: 500,
    oppose: 400,
  },
  {
    id: "5",
    title: "ÁâπÊúóÊôÆÊîøÂ∫úÊé®Âä®Âà∂ÈÄ†‰∏öÂõûÊµÅÔºåÊîøÁ≠ñÊïàÊûúÂ≠òÁñë",
    description: "ÁâπÊúóÊôÆÊîøÂ∫úÂº∫Ë∞ÉÈÄöËøáÂÖ≥Á®éÊîøÁ≠ñÊé®Âä®Âà∂ÈÄ†‰∏öÂõûÊµÅÁæéÂõΩÔºå‰ª•Â¢ûÂº∫ÂõΩÂÜÖÁªèÊµé„ÄÇÁÑ∂ËÄåÔºå‰∏ìÂÆ∂ÊåáÂá∫ÔºåÁü≠ÊúüÂÜÖÂà∂ÈÄ†‰∏öÂõûÊµÅÁöÑÊïàÊûúÊúâÈôêÔºå‰∏îÂèØËÉΩÂØºËá¥ÂõΩÈôÖË¥∏ÊòìÂÖ≥Á≥ªÁ¥ßÂº†ÔºåÂΩ±ÂìçÁæéÂõΩÂú®ÂÖ®ÁêÉÂ∏ÇÂú∫ÁöÑÂú∞‰Ωç„ÄÇ",
    status: "ÊîøÁ≠ñÂÆûÊñΩ‰∏≠",
    heat: 1020,
    support: 650,
    oppose: 450,
  },
  {
    id: "6",
    title: "ÂõΩÈôÖÁ§æ‰ºöÂØπÁæéÂõΩÂçïËæπÂÖ≥Á®éÊîøÁ≠ñË°®ËææÂÖ≥Âàá",
    description: "Â§ö‰∏™ÂõΩÂÆ∂ÂíåÂõΩÈôÖÁªÑÁªáÂØπÁæéÂõΩÂÆûÊñΩÂçïËæπÂÖ≥Á®éÊîøÁ≠ñË°®Á§∫ÂÖ≥ÂàáÔºåËÆ§‰∏∫ËøôÂèØËÉΩËøùÂèçÂõΩÈôÖË¥∏ÊòìËßÑÂàôÔºåÁ†¥ÂùèÂ§öËæπË¥∏Êòì‰ΩìÁ≥ªÁöÑÁ®≥ÂÆö„ÄÇÂëºÂêÅÁæéÂõΩ‰∏éË¥∏Êòì‰ºô‰º¥ÈÄöËøáÂØπËØùËß£ÂÜ≥‰∫âÁ´ØÔºåÁª¥Êä§ÂÖ®ÁêÉÁªèÊµéÁß©Â∫è„ÄÇ",
    status: "Â§ñ‰∫§Á£ãÂïÜ‰∏≠",
    heat: 760,
    support: 400,
    oppose: 500,
  },
];

const opinionPool = [
  { content: "ËøôÊ≥¢ÁâπÊúóÊôÆÁöÑÂÖ≥Á®éÁúüÊòØËÆ©‰∫∫Êó†ËØ≠ÔºåË∂ÖÂ∏ÇÈáå‰ª∑Ê†ºÊ∂®ÂæóÈ£ûÂø´ÔºåÊÑüËßâÈí±ÂåÖÂú®ÊµÅË°Ä„ÄÇ" },
  { content: "‰Ωú‰∏∫‰∏ÄÂêçÂ∞èÂæÆ‰ºÅ‰∏ö‰∏ªÔºåÊñ∞ÂÖ≥Á®éÁõ¥Êé•ËÆ©ÊàëÁöÑËøõÂá∫Âè£ÊàêÊú¨Ê∂®‰∫Ü20%ÔºåÂéãÂäõÂ±±Â§ß„ÄÇ" },
  { content: "Ë°®Èù¢‰∏äÊòØ‰∏∫‰∫ÜËÆ©Âà∂ÈÄ†‰∏öÂõûÊµÅÔºå‰ΩÜÁé∞ÂÆûÊòØËΩ¨Â´ÅÂà∞Ê∂àË¥πËÄÖË∫´‰∏äÔºåÊÑüËßâË¢´Ââ≤Èü≠Ëèú‰∫Ü„ÄÇ" },
  { content: "‰∏≠Áæé90Â§©ÁºìÂíåÂçèËÆÆÁÆóÊòØÂñòÂè£Ê∞îÔºå‰ΩÜË∞ÅÁü•ÈÅìÂêéÈù¢Âèà‰ºö‰∏ç‰ºöÂèçÂ§çÊäòËÖæ„ÄÇ" },
  { content: "Shein Ëøô‰∫õÂø´Êó∂Â∞öÂìÅÁâåÂèóÂΩ±ÂìçÔºå‰π∞‰ª∂Ë°£ÊúçÈÉΩÊØî‰ª•ÂâçË¥µ‰∫Ü‰∏ÄÂ§ßÊà™ÔºåÁúüÂàá‰Ωì‰ºöÂà∞‰∫Ü„ÄÇ" },
  { content: "Âê¨ËØ¥Ê≤ÉÂ∞îÁéõ‰πüË¶ÅÊ∂®‰ª∑ÔºåÊôÆÈÄöÂÆ∂Â∫≠ÁöÑÊó•Â∏∏ÂºÄÈîÄÁúüÁöÑÈ°∂‰∏ç‰Ωè‰∫Ü„ÄÇ" },
  { content: "Êú¨Êù•ÊåáÊúõÂÖ®ÁêÉ‰æõÂ∫îÈìæ‰ºòÂåñÁÇπÔºåÁªìÊûúÂÖ≥Á®éÊîøÁ≠ñ‰∏ÄÊêûÔºåÂèçËÄåË∂äÊù•Ë∂äË¥µÔºåÊÅ∂ÊÄßÂæ™ÁéØ„ÄÇ" },
  { content: "ÂØπÂ∞èÂìÅÁâåÂÜ≤ÂáªÂæàÂ§ßÔºåÂ§ßÂÖ¨Âè∏ËøòËÉΩÊ∂®‰ª∑Ôºå‰ΩÜÂ∞èÂÖ¨Âè∏Âè™ËÉΩÁ°¨ÊâõÔºåË¶ÅÂÄíÈó≠‰∏ÄÊâπ‰∫Ü„ÄÇ" },
  { content: "ÊîøÁ≠ñÂê¨‰∏äÂéªÊåØÂ•ã‰∫∫ÂøÉÔºå‰ΩÜÂà∂ÈÄ†‰∏öÂõûÊµÅ‰∏çÊòØËØ¥ÂõûÂ∞±ËÉΩÂõûÔºåÂÆûÈôÖÈöæÂ∫¶ÂæàÂ§ß„ÄÇ" },
  { content: "ÂÖ≥Á®é‰∏ÄÊ∂®Ôºå‰ª£Ë¥≠„ÄÅÊµ∑Ê∑òÊàêÊú¨È£ûÊ∂®ÔºåÊ∂àË¥πËÄÖ‰π∞ÂçïÔºå‰ΩìÈ™åË∂äÊù•Ë∂äÂ∑Æ„ÄÇ" },
  { content: "Ë∫´ËæπÊêûÂ§ñË¥∏ÁöÑÊúãÂèãÈÉΩÂú®ËÄÉËôëËΩ¨Âéª‰∏úÂçó‰∫öÂª∫ÂéÇÔºåÈÅøÂºÄÁæéÂõΩËøôÊ≥¢ÊîøÁ≠ñÈ£éÈô©„ÄÇ" },
  { content: "ÁâπÊúóÊôÆÊÉ≥Êêû‰øùÊä§‰∏ª‰πâÔºåÁªìÊûúÂè™‰ºöËÆ©ÂõΩÈôÖË¥∏ÊòìÊõ¥Ââ≤Ë£ÇÔºåÂØπÂ§ßÂÆ∂ÈÉΩÊ≤°Â•ΩÂ§Ñ„ÄÇ" },
  { content: "‰Ωú‰∏∫Ê∂àË¥πËÄÖÔºåÊàëÂè™ÂÖ≥ÂøÉ‰∏Ä‰ª∂‰∫ãÔºöÊàë‰π∞ÁöÑ‰∏úË•øÊòØ‰∏çÊòØÂèàË¶ÅÊ∂®‰ª∑‰∫ÜÔºü" },
  { content: "ËØ¥Âà∞Â∫ïÔºåËøô‰∫õÂÖ≥Á®éËøòÊòØÊôÆÈÄö‰∫∫‰π∞ÂçïÔºåË°®Èù¢ÊâìË¥∏ÊòìÊàòÔºåÂÆûÈôÖÂΩ±ÂìçÊ∞ëÁîü„ÄÇ" },
  { content: "‰∏≠ÂõΩÈôç‰Ωé‰∫ÜÂØπÁæéÈÉ®ÂàÜÂÖ≥Á®éÔºåÊÑüËßâÊÄÅÂ∫¶ÂæàÂÖãÂà∂Ôºå‰ΩÜÂ±ÄÂäø‰æùÁÑ∂‰∏ç‰πêËßÇ„ÄÇ" },
  { content: "ÈÄöËÉÄÂ∑≤ÁªèÂ§üÂ§∏Âº†‰∫ÜÔºåÊñ∞ÂÖ≥Á®éÊîøÁ≠ñÁÆÄÁõ¥ÊòØÁÅ´‰∏äÊµáÊ≤πÔºåÂêÉÁ©øÁî®ÈÉΩÊ∂®„ÄÇ" },
  { content: "‰Ωú‰∏∫Âà∂ÈÄ†‰∏ö‰ªé‰∏öËÄÖÔºåÊÉ≥ÁúãÂà∞‰∫ß‰∏öÂõûÊµÅÔºå‰ΩÜÁúü‰∏çÊòØÈù†Âä†ÂÖ≥Á®éÂ∞±ËÉΩÂÆûÁé∞ÁöÑ„ÄÇ" },
  { content: "Â∏åÊúõÂêÑÂõΩËÉΩÂõûÂΩíÂ§öËæπÂçè‰ΩúÔºåÂçïËæπ‰∏ª‰πâÂè™‰ºöËÆ©ÁªèÊµéÂΩ¢ÂäøÊõ¥Á≥üÁ≥ï„ÄÇ" },
  { content: "ËøôÁßçÁü≠ÊúüÊîøÊ≤ªÊìç‰ΩúÔºåÂèó‰º§ÁöÑÊòØËÄÅÁôæÂßìÔºå‰∏çÊòØÂ§ßËµÑÊú¨„ÄÇ" },
  { content: "ÂÖ≥Á®éÂèçÂ§çÊãâÊâØ‰∏ãÔºå‰ºÅ‰∏ö‰ø°ÂøÉË∂äÊù•Ë∂äÂ∑ÆÔºåÊ≤°‰∫∫Êï¢ÊäïÈïøÁ∫ø‰∫Ü„ÄÇ" },
  { content: "ÂÖ≥Á®é‰∫âÁ´Ø‰∏ãÔºåÂæàÂ§ö‰∫ßÂìÅÈÉΩÂºÄÂßãÊ∂®‰ª∑ÔºåÊ∂àË¥πËÉΩÂäõË∑ü‰∏ç‰∏äÔºåÁªèÊµéÂè™‰ºöÊõ¥ÂÜ∑„ÄÇ" },
  { content: "ÂõΩÈôÖÁ§æ‰ºöÁöÑÊâπËØÑ‰∏çÊó†ÈÅìÁêÜÔºåÁæéÂõΩËøôÊ≥¢ÊîøÁ≠ñÂ§™È≤ÅËéΩ‰∫Ü„ÄÇ" },
  { content: "ÂÆ∂ÈáåÂÅöÂ§ñË¥∏ÂçÅÂá†Âπ¥‰∫ÜÔºåËøôÂá†Âπ¥‰∏ÄÊ≥¢Ê≥¢ÂÖ≥Á®éÊîøÁ≠ñÔºåÊ¥ª‰∏ãÂéªË∂äÊù•Ë∂äÈöæ‰∫Ü„ÄÇ" },
  { content: "ÊêûËøôÁßç‚ÄúÊãâ‰∏ÄÂàÄ‚ÄùÁöÑÊîøÁ≠ñÔºåÁúüÁöÑËÉΩ‰øùÊä§Êú¨Âúü‰∫ß‰∏öÂêóÔºüÊàëÂæàÊÄÄÁñë„ÄÇ" },
  { content: "ÊàëÂÆÅÊÑøËä±ÁÇπÈí±‰π∞Ë¥®ÈáèÂ•ΩÁöÑËøõÂè£Ë¥ßÔºå‰πü‰∏çÂ∏åÊúõÂõ†‰∏∫ÊîøÁ≠ñË¢´ÈÄºÁùÄ‰π∞Ë¥µÁöÑÁÉÇË¥ß„ÄÇ" },
  { content: "ÁâπÊúóÊôÆËøôÊ¨°ÊääÂÖ®ÁêÉ‰æõÂ∫îÈìæÂèàÊêÖ‰∫Ü‰∏ÄÈÅçÔºå‰ºÅ‰∏öÂè™ËÉΩËá™Êïë„ÄÇ" },
  { content: "Â¶ÇÊûú‰∏ÄÁõ¥Ëøô‰πàÊêû‰∏ãÂéªÔºåÁæéÂõΩÊú¨ÂúüÊ∂àË¥πËÄÖ‰ºöÊòØÊúÄÁªàÁöÑ‰π∞Âçï‰∫∫„ÄÇ" },
  { content: "‰Ωú‰∏∫ÊôÆÈÄöÊâìÂ∑•‰∫∫ÔºåÂè™Â∏åÊúõÂà´ÂÜçÊó†ËÑëÊ∂®‰ª∑‰∫ÜÔºåÂ∑≤Áªè‰π∞‰∏çËµ∑‰∫Ü„ÄÇ" },
  { content: "‰∏éÂÖ∂Âä†Á®éÔºå‰∏çÂ¶ÇÊÉ≥ÂäûÊ≥ïÊèêÈ´òÊú¨ÂõΩÁîü‰∫ßÂäõÔºåËøôÊâçÊòØÊ≠£ÈÅì„ÄÇ" },
  { content: "Â∏åÊúõÊîøÁ≠ñÈù¢Â§ö‰∏Ä‰∫õÁêÜÊÄßÂ£∞Èü≥ÔºåÂà´‰∏∫‰∫ÜÁü≠ÊúüÈÄâÁ•®Áâ∫Áâ≤ÈïøÊúüÁªèÊµé„ÄÇ" },
];

const getRandomOpinion = () => {
  const randomIndex = Math.floor(Math.random() * opinionPool.length);
  const randomUserNumber = Math.floor(Math.random() * 1000);
  const now = new Date();
  const timestamp = `${now.getHours().toString().padStart(2, "0")}:${now.getMinutes().toString().padStart(2, "0")}:${now.getSeconds().toString().padStart(2, "0")}`;

  return {
    user: `ÂåøÂêçÁî®Êà∑${randomUserNumber}`,
    content: opinionPool[randomIndex].content,
    timestamp,
    id: `${Date.now()}-${Math.random()}`,
  };
};

export default function HomePage() {
  const [userInput, setUserInput] = useState("");
  const [animatedTopics, setAnimatedTopics] = useState<Topic[]>(() => 
    mockTopics.map(topic => ({
      ...topic,
      animatedSupport: topic.support,
      animatedOppose: topic.oppose,
    })),
  );
  const [opinions, setOpinions] = useState<{ id: string; content: string; user: string; timestamp: string; }[]>([]);

  useEffect(() => {
    const interval = setInterval(() => {
      setAnimatedTopics(prevTopics => 
        prevTopics.map(topic => {
          const supportFluctuation = Math.floor(Math.random() * (topic.support * 0.1)) - (topic.support * 0.05);
          const opposeFluctuation = Math.floor(Math.random() * (topic.oppose * 0.1)) - (topic.oppose * 0.05);
          
          return {
            ...topic,
            animatedSupport: Math.max(0, topic.support + supportFluctuation),
            animatedOppose: Math.max(0, topic.oppose + opposeFluctuation),
          };
        }),
      );
    }, 2000);

    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    const initialOpinions = [];
    for (let i = 0; i < 3; i++) {
      initialOpinions.push(getRandomOpinion());
    }
    setOpinions(initialOpinions);
  }, []);

  useEffect(() => {
    const interval = setInterval(() => {
      setOpinions(prev => {
        const newOpinion = getRandomOpinion();
        const updatedOpinions = [newOpinion, ...prev];
        return updatedOpinions.slice(0, 6);
      });
    }, 3000 + Math.random() * 2000);
    return () => clearInterval(interval);
  }, []);

  return (
    <div className="relative min-h-screen bg-gradient-to-br from-gray-950 via-gray-900 to-gray-900 overflow-hidden">
      <div className="absolute inset-0 -z-10 pointer-events-none overflow-hidden">
        <div className="absolute top-16 left-24 w-64 h-64 bg-emerald-900 rounded-full blur-3xl opacity-30 animate-pulse"></div>
        <div className="absolute bottom-16 right-24 w-96 h-72 bg-blue-900 rounded-full blur-3xl opacity-20"></div>
        <div className="absolute top-1/3 right-1/4 w-52 h-52 bg-pink-900 rounded-full blur-2xl opacity-15"></div>
      </div>

      <header className="w-full px-8 py-4 flex items-center justify-between bg-gray-950/90 backdrop-blur border-b border-gray-800 shadow-sm z-30 sticky top-0">
        <div className="flex items-center gap-2">
          <span className="text-blue-400 font-bold text-xl tracking-wide">MetaEmpire</span>
          <span className="ml-3 text-sm text-gray-400">AI¬∑ÁªèÊµé¬∑Web3ÁÉ≠ÁÇπ</span>
        </div>
        <Button variant="outline" className="rounded-full px-4 text-blue-300 border-blue-700 hover:bg-blue-900/30 hover:text-white hover:border-blue-400 transition">ÊàëÁöÑËØùÈ¢ò</Button>
      </header>

      <main className="flex min-h-[calc(100vh-64px)]">
        <div className="flex-1 p-6 overflow-y-auto">
          <motion.div
            className="flex flex-col h-full"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.6 }}
          >
            <motion.h1
              className="text-3xl font-bold text-gray-100 tracking-tight"
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              ÁÉ≠Èó®ËÆÆÈ¢ò
            </motion.h1>

            <div className="w-full h-1 bg-gradient-to-r from-blue-800 via-emerald-700 to-pink-700 rounded-full my-4 opacity-30" />

            <div className="grid grid-cols-3 grid-rows-2 gap-5 h-[80vh]">
              <motion.div
                className="col-span-2 row-span-2"
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.7 }}
              >
                {(() => {
                  const topic = animatedTopics[0] || mockTopics[0];
                  const styles = getTopicStyles(topic.title);
                  return (
                    <Link href="/dashboard" className="h-full block">
                      <Card className={`h-full flex flex-col justify-between transition-all cursor-pointer border-2 ${styles.borderColor} ${styles.bgColor} shadow-md hover:shadow-xl hover:scale-[1.01] relative overflow-hidden group`}>

                        <div className="absolute inset-0 bg-[url('/image.png')] bg-cover bg-center brightness-[0.3] opacity-90 z-0 pointer-events-none"></div>

                        <div className="absolute top-0 left-0 w-full h-10 flex items-center justify-between px-3 z-10">
                          <div className="flex items-center text-red-400 text-sm font-medium">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
                              <path d="M2 10.5a1.5 1.5 0 113 0v6a1.5 1.5 0 01-3 0v-6zM6 10.333v5.43a2 2 0 001.106 1.79l.05.025A4 4 0 008.943 18h5.416a2 2 0 001.962-1.608l1.2-6A2 2 0 0015.56 8H12V4a2 2 0 00-2-2 1 1 0 00-1 1v.667a4 4 0 01-.8 2.4L6.8 7.933a4 4 0 00-.8 2.4z" />
                            </svg>
                            {topic.animatedSupport || topic.support}
                          </div>
                          <div className="flex items-center text-blue-400 text-sm font-medium">
                            {topic.animatedOppose || topic.oppose}
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 ml-1" viewBox="0 0 20 20" fill="currentColor">
                              <path d="M18 9.5a1.5 1.5 0 11-3 0v-6a1.5 1.5 0 013 0v6zM14 9.667v-5.43a2 2 0 00-1.105-1.79l-.05-.025A4 4 0 0011.055 2H5.64a2 2 0 00-1.962 1.608l-1.2 6A2 2 0 004.44 12H8v4a2 2 0 002 2 1 1 0 001-1v-.667a4 4 0 01.8-2.4l1.4-1.866a4 4 0 00.8-2.4z" />
                            </svg>
                          </div>
                        </div>

                        <div className="absolute top-10 left-0 w-full h-1.5 flex bg-blue-500/30 z-10">
                          <div 
                            className="h-full bg-red-500 transition-all duration-300" 
                            style={{ width: `${getSupportRatio(topic.animatedSupport || topic.support, topic.animatedOppose || topic.oppose)}%` }} 
                          />
                        </div>

                        <div className={`absolute top-1.5 left-0 w-1 h-[calc(100%-0.375rem)] ${styles.bgColor} ${styles.borderColor} z-10`}></div>

                        <div className="absolute bottom-0 right-0 w-48 h-48 bg-gradient-to-tr from-white/0 to-gray-500/30 rounded-full blur-3xl opacity-20 group-hover:opacity-35 transition-opacity z-10"></div>

                        <CardContent className="p-6 relative z-10">
                          <div className="flex items-center justify-between mb-4">
                            <div className="flex items-center gap-2">
                              <span className="text-2xl">{styles.icon}</span>
                              <h2 className={`text-3xl font-extrabold ${styles.textColor} tracking-tight leading-snug`}>{topic.title}</h2>
                            </div>
                            <Badge variant="outline" className={`text-sm ${styles.textColor} ${styles.borderColor} bg-gray-900/40`}>{topic.status}</Badge>
                          </div>
                          <p className="text-base text-gray-300 mb-6 leading-relaxed">{topic.description}</p>
                          <div className="text-sm font-medium flex items-center gap-1">
                            <span className="text-orange-400">{getHeatIndicator(topic.heat)}</span>
                            <span className="text-gray-400">ÁÉ≠Â∫¶Ôºö{topic.heat.toLocaleString()}</span>
                          </div>
                        </CardContent>

                      </Card>
                    </Link>

                  );
                })()}
              </motion.div>

              {animatedTopics.slice(1, 3).map((topic, idx) => {
                const styles = getTopicStyles(topic.title);
                return (
                  <motion.div
                    key={topic.id}
                    initial={{ opacity: 0, y: 30 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.5 + idx * 0.1 }}
                  >
                    <Card className={`h-full flex flex-col justify-between hover:shadow-lg transition cursor-pointer border ${styles.borderColor} ${styles.bgColor} relative overflow-hidden`}>
                      <div className="absolute top-0 left-0 w-full h-8 flex items-center justify-between px-2">
                        <div className="flex items-center text-red-400 text-sm font-medium">
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M2 10.5a1.5 1.5 0 113 0v6a1.5 1.5 0 01-3 0v-6zM6 10.333v5.43a2 2 0 001.106 1.79l.05.025A4 4 0 008.943 18h5.416a2 2 0 001.962-1.608l1.2-6A2 2 0 0015.56 8H12V4a2 2 0 00-2-2 1 1 0 00-1 1v.667a4 4 0 01-.8 2.4L6.8 7.933a4 4 0 00-.8 2.4z" />
                          </svg>
                          {topic.support}
                        </div>
                        <div className="flex items-center text-blue-400 text-sm font-medium">
                          {topic.oppose}
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M18 9.5a1.5 1.5 0 11-3 0v-6a1.5 1.5 0 013 0v6zM14 9.667v-5.43a2 2 0 00-1.105-1.79l-.05-.025A4 4 0 0011.055 2H5.64a2 2 0 00-1.962 1.608l-1.2 6A2 2 0 004.44 12H8v4a2 2 0 002 2 1 1 0 001-1v-.667a4 4 0 01.8-2.4l1.4-1.866a4 4 0 00.8-2.4z" />
                          </svg>
                        </div>
                      </div>
                      <div className="absolute top-8 left-0 w-full h-1.5 flex bg-blue-500/30">
                        <div 
                          className="h-full bg-red-500 transition-all duration-300" 
                          style={{ width: `${getSupportRatio(topic.support, topic.oppose)}%` }} 
                        />
                      </div>
                      <div className={`absolute top-1.5 left-0 w-1 h-[calc(100%-0.375rem)] ${styles.bgColor} ${styles.borderColor}`}></div>
                      <CardContent className="p-4 pt-6">
                        <div className="flex items-center justify-between mb-2">
                          <div className="flex items-center gap-1">
                            <span className="text-lg">{styles.icon}</span>
                            <h3 className={`text-lg font-semibold ${styles.textColor}`}>{topic.title}</h3>
                          </div>
                          <Badge variant="outline" className={`${styles.textColor} ${styles.borderColor} bg-gray-900/40`}>{topic.status}</Badge>
                        </div>
                        <p className="text-sm text-gray-300 mb-2">{topic.description}</p>
                        <div className="text-xs font-medium flex items-center gap-1">
                          <span className="text-orange-400">{getHeatIndicator(topic.heat)}</span>
                          <span className="text-gray-400">ÁÉ≠Â∫¶Ôºö{topic.heat.toLocaleString()}</span>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                );
              })}

              {animatedTopics.slice(3, 6).map((topic, idx) => {
                const styles = getTopicStyles(topic.title);
                return (
                  <motion.div
                    key={topic.id}
                    initial={{ opacity: 0, y: 30 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.5 + idx * 0.1 }}
                  >
                    <Card className={`flex flex-col justify-between hover:shadow-lg transition cursor-pointer border ${styles.borderColor} ${styles.bgColor} relative overflow-hidden`}>
                      <div className="absolute top-0 left-0 w-full h-8 flex items-center justify-between px-2">
                        <div className="flex items-center text-red-400 text-sm font-medium">
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M2 10.5a1.5 1.5 0 113 0v6a1.5 1.5 0 01-3 0v-6zM6 10.333v5.43a2 2 0 001.106 1.79l.05.025A4 4 0 008.943 18h5.416a2 2 0 001.962-1.608l1.2-6A2 2 0 0015.56 8H12V4a2 2 0 00-2-2 1 1 0 00-1 1v.667a4 4 0 01-.8 2.4L6.8 7.933a4 4 0 00-.8 2.4z" />
                          </svg>
                          {topic.support}
                        </div>
                        <div className="flex items-center text-blue-400 text-sm font-medium">
                          {topic.oppose}
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M18 9.5a1.5 1.5 0 11-3 0v-6a1.5 1.5 0 013 0v6zM14 9.667v-5.43a2 2 0 00-1.105-1.79l-.05-.025A4 4 0 0011.055 2H5.64a2 2 0 00-1.962 1.608l-1.2 6A2 2 0 004.44 12H8v4a2 2 0 002 2 1 1 0 001-1v-.667a4 4 0 01.8-2.4l1.4-1.866a4 4 0 00.8-2.4z" />
                          </svg>
                        </div>
                      </div>
                      <div className="absolute top-8 left-0 w-full h-1.5 flex bg-blue-500/30">
                        <div 
                          className="h-full bg-red-500 transition-all duration-300" 
                          style={{ width: `${getSupportRatio(topic.support, topic.oppose)}%` }} 
                        />
                      </div>
                      <div className={`absolute top-1.5 left-0 w-1 h-[calc(100%-0.375rem)] ${styles.bgColor} ${styles.borderColor}`}></div>
                      <CardContent className="p-4 pt-6">
                        <div className="flex items-center justify-between mb-2">
                          <div className="flex items-center gap-1">
                            <span className="text-lg">{styles.icon}</span>
                            <h3 className={`text-lg font-semibold ${styles.textColor}`}>{topic.title}</h3>
                          </div>
                          <Badge variant="outline" className={`${styles.textColor} ${styles.borderColor} bg-gray-900/40`}>{topic.status}</Badge>
                        </div>
                        <p className="text-sm text-gray-300 mb-2">{topic.description}</p>
                        <div className="text-xs font-medium flex items-center gap-1">
                          <span className="text-orange-400">{getHeatIndicator(topic.heat)}</span>
                          <span className="text-gray-400">ÁÉ≠Â∫¶Ôºö{topic.heat.toLocaleString()}</span>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                );
              })}
            </div>
          </motion.div>
        </div>

        {/* ‰æßËæπÊ†è Ê∑±Ëâ≤ */}
        <aside className="w-80 border-l border-gray-800 p-4 flex flex-col bg-gray-950/90 backdrop-blur-sm">
          <h2 className="text-xl font-bold mb-4 text-gray-100 flex items-center gap-2">
            <span className="text-blue-400">‚Ä¢</span>
            ÂÆûÊó∂ÂèëË®Ä
            <span className="ml-auto text-xs text-gray-500 animate-pulse">ÂÆûÊó∂Êõ¥Êñ∞‰∏≠...</span>
          </h2>
          <ScrollArea className="flex-1 mb-4">
            <div className="space-y-4">
              <AnimatePresence initial={false}>
                {opinions.map((opinion) => (
                  <motion.div
                    key={opinion.id}
                    initial={{ opacity: 0, y: -20, height: 0 }}
                    animate={{ opacity: 1, y: 0, height: "auto" }}
                    exit={{ opacity: 0, height: 0 }}
                    transition={{ type: "spring", stiffness: 500, damping: 30 }}
                    className="border border-gray-800 rounded-lg p-4 hover:bg-blue-900/10 transition-all duration-300 shadow-sm bg-gray-900/70"
                  >
                    <div className="flex items-center justify-between mb-1">
                      <div className="text-sm font-semibold text-blue-400">{opinion.user}</div>
                      <div className="text-xs bg-blue-900/30 text-blue-300 px-2 py-0.5 rounded-full">{opinion.timestamp}</div>
                    </div>
                    <div className="text-sm text-gray-100 font-medium">{opinion.content}</div>
                  </motion.div>
                ))}
              </AnimatePresence>
            </div>
          </ScrollArea>
          <form onSubmit={(e) => {
            e.preventDefault();
            if (userInput.trim()) {
              localStorage.setItem("metaempire_pending_message", userInput);
              window.location.href = "/process";
            }
          }} className="flex flex-col gap-3 border-t pt-4 border-gray-800">
            <Input 
              placeholder="ÂèëË°®‰Ω†ÁöÑËßÇÁÇπ..." 
              className="border-blue-900 bg-gray-950 text-gray-100 placeholder-gray-500 focus:border-blue-400 focus:ring-blue-500" 
              value={userInput}
              onChange={(e) => setUserInput(e.target.value)}
            />
            <div className="flex gap-2">
              <Button 
                type="submit" 
                className="bg-blue-700 hover:bg-blue-600 text-white flex-grow"
                disabled={!userInput.trim()}
              >
                ÂèëÈÄÅ
              </Button>
              <Button 
                type="button" 
                variant="outline" 
                className="border-blue-700 text-blue-300 hover:bg-blue-900/30 hover:text-white hover:border-blue-400 flex items-center gap-1 transition"
                onClick={() => window.location.href = "/process"}
              >
                Êü•ÁúãÂ§ÑÁêÜÊµÅÁ®ã
              </Button>
            </div>
          </form>
        </aside>
      </main>

      <footer className="text-center py-4 text-gray-600 text-xs bg-transparent">
        ¬© 2025 MetaEmpire ¬∑ Powered by Next.js & TailwindCSS
      </footer>
    </div>
  );
}
